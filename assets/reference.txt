

// ------------------------------------------------------------
// 📁 File tree (create these files)
// ------------------------------------------------------------
// app/_layout.tsx
// app/index.tsx
// app/(auth)/_layout.tsx
// app/(auth)/login.tsx
// app/(auth)/register.tsx
// app/(auth)/otp.tsx
// app/(app)/_layout.tsx
// app/(app)/home.tsx
// src/context/AuthContext.tsx
// src/lib/api.ts
// src/components/Form.tsx
// ------------------------------------------------------------
// Install deps:
//   npm i expo-router expo-secure-store
// (expo-router is already in your app.json plugins; run `npx expo start -c` once after setup)
// ------------------------------------------------------------

// app/_layout.tsx
import React from 'react';
import { Stack, SplashScreen } from 'expo-router';
import { AuthProvider, useAuth } from '../src/context/AuthContext';

SplashScreen.preventAutoHideAsync().catch(() => {});

function RootLayoutInner() {
  // Keep splash until auth state is restored
  const { bootstrapped } = useAuth();
  React.useEffect(() => {
    if (bootstrapped) SplashScreen.hideAsync();
  }, [bootstrapped]);

  return (
    <Stack screenOptions={{ headerShown: false }}>
      {/* Auth group */}
      <Stack.Screen name="(auth)" />
      {/* App group */}
      <Stack.Screen name="(app)" />
    </Stack>
  );
}

export default function RootLayout() {
  return (
    <AuthProvider>
      <RootLayoutInner />
    </AuthProvider>
  );
}

// app/index.tsx
import { Redirect } from 'expo-router';
import { useAuth } from '../src/context/AuthContext';

export default function Index() {
  const { user } = useAuth();
  return <Redirect href={user ? '/(app)/home' : '/(auth)/login'} />;
}

// app/(auth)/_layout.tsx
import { Stack } from 'expo-router';
export default function AuthLayout() {
  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="login" />
      <Stack.Screen name="register" />
      <Stack.Screen name="otp" />
    </Stack>
  );
}

// app/(auth)/login.tsx
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Alert } from 'react-native';
import { Link, router } from 'expo-router';
import { Input, Button } from '../../src/components/Form';
import { useAuth } from '../../src/context/AuthContext';

export default function LoginScreen() {
  const { signIn } = useAuth();
  const [email, setEmail] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [loading, setLoading] = React.useState(false);

  const onLogin = async () => {
    try {
      setLoading(true);
      await signIn(email, password);
      router.replace('/(app)/home');
    } catch (e: any) {
      Alert.alert('Login failed', e.message || 'Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Welcome back 👋</Text>
      <Input
        label="Email"
        value={email}
        onChangeText={setEmail}
        autoCapitalize="none"
        keyboardType="email-address"
      />
      <Input
        label="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry
      />
      <Button title={loading ? 'Logging in…' : 'Login'} onPress={onLogin} disabled={loading} />

      <View style={{ height: 16 }} />
      <TouchableOpacity>
        <Link href="/(auth)/register" style={styles.link}>Create an account</Link>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 24, gap: 12, justifyContent: 'center' },
  title: { fontSize: 28, fontWeight: '700', marginBottom: 12 },
  link: { color: '#2563eb', fontSize: 16 }
});

// app/(auth)/register.tsx
import React from 'react';
import { View, Text, StyleSheet, Alert } from 'react-native';
import { Link, router } from 'expo-router';
import { Input, Button } from '../../src/components/Form';
import { api } from '../../src/lib/api';

export default function RegisterScreen() {
  const [name, setName] = React.useState('');
  const [email, setEmail] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [loading, setLoading] = React.useState(false);

  const onRegister = async () => {
    try {
      setLoading(true);
      await api.register({ name, email, password });
      // Go to OTP screen with email param so we know who to verify
      router.push({ pathname: '/(auth)/otp', params: { email } });
    } catch (e: any) {
      Alert.alert('Registration failed', e.message || 'Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Create account ✨</Text>
      <Input label="Name" value={name} onChangeText={setName} />
      <Input label="Email" value={email} onChangeText={setEmail} autoCapitalize="none" keyboardType="email-address" />
      <Input label="Password" value={password} onChangeText={setPassword} secureTextEntry />
      <Button title={loading ? 'Creating…' : 'Sign up'} onPress={onRegister} disabled={loading} />

      <View style={{ height: 16 }} />
      <Link href="/(auth)/login" style={styles.link}>Already have an account? Log in</Link>
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 24, gap: 12, justifyContent: 'center' },
  title: { fontSize: 28, fontWeight: '700', marginBottom: 12 },
  link: { color: '#2563eb', fontSize: 16 }
});

// app/(auth)/otp.tsx
import React from 'react';
import { View, Text, StyleSheet, Alert } from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { Input, Button } from '../../src/components/Form';
import { api } from '../../src/lib/api';

export default function OtpScreen() {
  const params = useLocalSearchParams();
  const email = Array.isArray(params.email) ? params.email[0] : params.email || '';
  const [code, setCode] = React.useState('');
  const [seconds, setSeconds] = React.useState(60);
  const [loading, setLoading] = React.useState(false);

  React.useEffect(() => {
    const id = setInterval(() => setSeconds((s) => (s > 0 ? s - 1 : 0)), 1000);
    return () => clearInterval(id);
  }, []);

  const onVerify = async () => {
    try {
      setLoading(true);
      await api.verifyOtp({ email, code });
      Alert.alert('Success', 'Your account has been verified. You can now log in.');
      router.replace('/(auth)/login');
    } catch (e: any) {
      Alert.alert('Verification failed', e.message || 'Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const onResend = async () => {
    try {
      if (seconds > 0) return;
      await api.resendOtp({ email });
      setSeconds(60);
    } catch (e: any) {
      Alert.alert('Error', e.message || 'Could not resend code.');
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Verify email</Text>
      <Text style={styles.subtitle}>We sent a 6‑digit code to {email}</Text>
      <Input label="OTP Code" value={code} onChangeText={setCode} keyboardType="number-pad" maxLength={6} />
      <Button title={loading ? 'Verifying…' : 'Verify'} onPress={onVerify} disabled={loading || code.length < 6} />
      <Text style={styles.muted}>Didn't get it?</Text>
      <Button variant="ghost" title={seconds > 0 ? `Resend in ${seconds}s` : 'Resend code'} onPress={onResend} disabled={seconds > 0} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 24, gap: 12, justifyContent: 'center' },
  title: { fontSize: 28, fontWeight: '700' },
  subtitle: { color: '#666', marginBottom: 8 },
  muted: { color: '#666', textAlign: 'center' }
});

// app/(app)/_layout.tsx
import { Stack } from 'expo-router';
export default function AppLayout() {
  return (
    <Stack>
      <Stack.Screen name="home" options={{ title: 'Smilevieu' }} />
    </Stack>
  );
}

// app/(app)/home.tsx
import React from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { useAuth } from '../../src/context/AuthContext';

export default function HomeScreen() {
  const { user, signOut } = useAuth();
  return (
    <View style={styles.container}>
      <Text style={styles.title}>Hello {user?.name || 'there'} 👋</Text>
      <Button title="Sign out" onPress={signOut} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, alignItems: 'center', justifyContent: 'center', gap: 12 },
  title: { fontSize: 24, fontWeight: '700' }
});

// src/context/AuthContext.tsx
import React from 'react';
import * as SecureStore from 'expo-secure-store';
import { api } from '../lib/api';

export type User = { id: string; name: string; email: string } | null;

type Ctx = {
  user: User;
  bootstrapped: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
};

const AuthContext = React.createContext<Ctx | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = React.useState<User>(null);
  const [bootstrapped, setBootstrapped] = React.useState(false);

  React.useEffect(() => {
    (async () => {
      const token = await SecureStore.getItemAsync('auth_token');
      if (token) {
        try {
          const me = await api.me(token);
          setUser(me);
        } catch {
          await SecureStore.deleteItemAsync('auth_token');
        }
      }
      setBootstrapped(true);
    })();
  }, []);

  const signIn = async (email: string, password: string) => {
    const { token, user } = await api.login({ email, password });
    await SecureStore.setItemAsync('auth_token', token);
    setUser(user);
  };

  const signOut = async () => {
    await SecureStore.deleteItemAsync('auth_token');
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, signIn, signOut, bootstrapped }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const ctx = React.useContext(AuthContext);
  if (!ctx) throw new Error('useAuth must be used within <AuthProvider>');
  return ctx;
}

// src/lib/api.ts
// ⭐ Replace these mock calls with your backend later.
export const api = {
  async register({ name, email, password }: { name: string; email: string; password: string }) {
    // Simulate remote call
    await wait(700);
    if (!email.includes('@')) throw new Error('Enter a valid email.');
    // Pretend server sent OTP
    return { ok: true };
  },
  async resendOtp({ email }: { email: string }) {
    await wait(400);
    if (!email) throw new Error('Missing email.');
    return { ok: true };
  },
  async verifyOtp({ email, code }: { email: string; code: string }) {
    await wait(700);
    if (code !== '123456') throw new Error('Invalid code. Try 123456 for demo.');
    return { ok: true };
  },
  async login({ email, password }: { email: string; password: string }) {
    await wait(800);
    if (password.length < 4) throw new Error('Password too short');
    // Return fake token + user
    return {
      token: 'demo-token-abc',
      user: { id: 'u_1', name: email.split('@')[0] || 'User', email },
    };
  },
  async me(token: string) {
    await wait(300);
    if (!token) throw new Error('No token');
    return { id: 'u_1', name: 'Demo', email: 'demo@example.com' };
  },
};

function wait(ms: number) {
  return new Promise((res) => setTimeout(res, ms));
}

// src/components/Form.tsx
import React from 'react';
import { View, Text, TextInput, StyleSheet, TouchableOpacity, ActivityIndicator } from 'react-native';

type InputProps = React.ComponentProps<typeof TextInput> & { label?: string };
export function Input({ label, style, ...rest }: InputProps) {
  return (
    <View style={f.container}>
      {label ? <Text style={f.label}>{label}</Text> : null}
      <TextInput
        style={[f.input, style]}
        placeholderTextColor="#9ca3af"
        {...rest}
      />
    </View>
  );
}

type BtnProps = { title: string; onPress?: () => void; disabled?: boolean; variant?: 'solid' | 'ghost' };
export function Button({ title, onPress, disabled, variant = 'solid' }: BtnProps) {
  const isGhost = variant === 'ghost';
  return (
    <TouchableOpacity onPress={onPress} disabled={disabled} style={[f.button, isGhost && f.ghost, disabled && { opacity: 0.6 }]}>
      <Text style={[f.buttonText, isGhost && { color: '#2563eb' }]}>{title}</Text>
    </TouchableOpacity>
  );
}

const f = StyleSheet.create({
  container: { gap: 6 },
  label: { fontSize: 14, color: '#374151' },
  input: { borderWidth: 1, borderColor: '#e5e7eb', borderRadius: 12, paddingHorizontal: 14, paddingVertical: 12, fontSize: 16 },
  button: { backgroundColor: '#2563eb', paddingVertical: 12, borderRadius: 12, alignItems: 'center' },
  buttonText: { color: 'white', fontWeight: '600', fontSize: 16 },
  ghost: { backgroundColor: 'transparent', borderWidth: 1, borderColor: '#dbeafe' },
});

// ------------------------------------------------------------
// ✅ How to use this scaffold
// ------------------------------------------------------------
// 1) Create the files above with the exact paths.
// 2) Ensure your app.json has the `expo-router` plugin (it does) and run `npx expo start -c`.
// 3) Start your dev client: `npx expo start --dev-client`.
// 4) Demo OTP code is 123456. Replace src/lib/api.ts with your real API later.
// ------------------------------------------------------------



{/* <Stack screenOptions={{ headerShown: false }}>
        <Stack.Screen name="login" />
        <Stack.Screen name="register" />
      </Stack> */}


//{index.tsx having auth based redirection}

import { Redirect } from "expo-router";
import { useEffect, useState } from "react";
import { View, ActivityIndicator } from "react-native";

// Example: replace this with your real auth check (e.g. Firebase, Supabase, AsyncStorage, Clerk)
async function checkAuth() {
  // fake delay + "logged in" state for demo
  return new Promise<boolean>((resolve) =>
    setTimeout(() => resolve(false), 1000) // change to true to simulate logged in
  );
}

export default function Index() {
  const [loading, setLoading] = useState(true);
  const [authenticated, setAuthenticated] = useState<boolean | null>(null);

  useEffect(() => {
    checkAuth().then((result) => {
      setAuthenticated(result);
      setLoading(false);
    });
  }, []);

  if (loading) {
    // Show splash while checking auth
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <ActivityIndicator size="large" />
      </View>
    );
  }

  // Redirect based on auth state
  if (authenticated) {
    return <Redirect href="/(app)/home" />; // signed-in area
  } else {
    return <Redirect href="/(auth)/login" />;
  }
}




const imageData = [
    { id: "1", name: "Chest X-Ray", src: require("../../../../assets/images/image1.jpg") },
    { id: "2", name: "MRI Scan", src: require("../../../../assets/images/image1.jpg") },
    { id: "3", name: "CT Report", src: require("../../../../assets/images/image1.jpg") },
  ];